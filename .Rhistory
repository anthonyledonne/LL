return(y)
})
library(xts)
library(timeSeries)
library(dygraphs)
addEvent <- function(dygraph, eventDate, eventLabel = NULL) {
dyEvent(
dygraph = dygraph,
date = eventDate,
label = eventLabel,
labelLoc = "bottom",
color = "red",
strokePattern = "dashed")
}
##### Build List of Dygraphs #####
bookCharts <- lapply(salesRanks, function(x) {
print(names(x))
y <- dygraph(
interpNA(as.xts(x), method = "linear"),
main=paste(names(x), "Sales Rank", sep = " ")) %>%
dyRangeSelector()
return(y)
})
bookCharts$`Only with You`
## Note, if method is 'daily' or 'hourly', you wont' be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "hourly" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
coolNewFunction(salesRanks$`Only with You`, 500)
coolNewFunction(salesRanks$`Only with You`, 5000)
## Note, if method is 'daily' or 'hourly', you wont' be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "daily" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 5000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
})
plot(sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
}))
plot(sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
}), type = "h")
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 5000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 2000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 1000))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < 500))
})
options(warn=-1)
## How many weeks above a certain sales rank? ##
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < 500))
})
## How many consecutive weeks above a certain sales rank? ##
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
#########
## Takes a data.frame of two columns, 1 is a timestamp, the other is an amazon sales rank
## Also takes a threshold (numeric)
## computes the maximum number of consecutive rows where the amazon sales rank
## falls at or below the threshold
## How many consecutive weeks above a certain sales rank? ##
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
lapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
options(warn=-1)
## How many weeks above a certain sales rank? ##
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < 500))
})
## How many consecutive weeks above a certain sales rank? ##
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
## Note, if method is 'daily' or 'hourly', you wont' be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "daily" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
options(warn=-1)
## How many weeks above a certain sales rank? ##
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < 500))
})
## How many consecutive weeks above a certain sales rank? ##
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction)
## Note, if method is 'daily' or 'hourly', you wont' be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "daily" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
###########################################################################################################################
##                                                                                                                       ##
##                                How many consecutive weeks above a certain sales rank?                                 ##
##                                                                                                                       ##
###########################################################################################################################
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, 500))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction)
source("~/Dropbox/Data Science Stuff/rfunctions/chartsForListOfSalesRanks.R")
bookCharts <- chartsForListOfSalesRanks(salesRanks = salesRanks, events = releaseDates)
bookCharts
rm(chartsForListOfSalesRanks)
## Note, if method is 'daily' or 'hourly', you won't be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "daily" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
source("~/Dropbox/Data Science Stuff/rfunctions/chartsForListOfSalesRanks.R")
bookCharts <- chartsForListOfSalesRanks(salesRanks = salesRanks, events = releaseDates)
rm(chartsForListOfSalesRanks)
bookCharts
###########################################################################################################################
##                                                                                                                       ##
##                                      How many weeks above a certain sales rank?                                       ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < SALESRANK))
})
rm(SALESRANK)
###########################################################################################################################
##                                                                                                                       ##
##                          How many consecutive measurements above a certain sales rank?                                ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, SALESRANK))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction, SALESRANK)
###########################################################################################################################
##                                                                                                                       ##
##                          How many consecutive measurements above a certain sales rank?                                ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, SALESRANK))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction, SALESRANK)
## Note, if method is 'daily' or 'hourly', you won't be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "daily" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
salesDates = list("")
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
## Testing some ideas here...
## Select the lowest rank of each day/week
salesRanks.lowest <- lapply(salesRanks, function(x) {
## Get the dataframe in question
y <- data.frame(x)
## Cut by day
y$day <- as.Date(cut(y$timestamp, breaks = "day"))
## Get the median salesrank of each day
names(y)[2] <- "salesrank"
y <- ddply(y, "day", summarise, "dailyMedian" = median(salesrank, na.rm = TRUE))
## Cut by week
y$week <- as.Date(cut(y$day, breaks = "week", start.on.monday = FALSE)) + 6
## Get the median salesrank of each week
y <- ddply(y, "week", summarise, "Weekly Median" = median(dailyMedian, na.rm = TRUE))
## Change the column names
names(y) <- c("timestamp", paste(names(salesRanks[[i]][2]), "Weekly Median Sales Rank", sep = " "))
return(y)
})
###########################################################################################################################
##                                                                                                                       ##
##                          How many consecutive measurements above a certain sales rank?                                ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, SALESRANK))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction, SALESRANK)
###########################################################################################################################
##                                                                                                                       ##
##                                      How many weeks above a certain sales rank?                                       ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < SALESRANK))
})
rm(SALESRANK)
## Note, if method is 'daily' or 'hourly', you won't be able to link Sales Ranks and Units Sold,
## since Units Sold comes to us in a weekly format. That also means everything else downstream
## will be broken too. Needs to be "weekly" for that stuff to work.
method = "weekly" ## weekly, daily, or hourly
releaseDates = list("After the Kiss" = as.POSIXct("2013-08-26 00:00:00"),
"Isn't She Lovely" = as.POSIXct("2013-10-28 00:00:00"),
"Love the One You're With" = as.POSIXct("2013-12-09 00:00:00"),
"Just One Night" = as.POSIXct("2014-04-22 00:00:00"),
"Only with You" = as.POSIXct("2014-07-29 00:00:00"),
"Broken" = as.POSIXct("2014-09-02 00:00:00"),
"Made for You" = as.POSIXct("2014-10-28 00:00:00"),
"The Trouble with Love" = as.POSIXct("2015-03-03 00:00:00"),
"Crushed" = as.POSIXct("2015-04-14 00:00:00"),
"Frisk Me" = as.POSIXct("2015-07-28 00:00:00"),
"Blurred Lines" = as.POSIXct("2015-08-25 00:00:00"))
salesDates = list("")
###########################################################################################################################
##                                                                                                                       ##
##                                                      Sales Ranks                                                      ##
##                                                                                                                       ##
###########################################################################################################################
source("~/Dropbox/Data Science Stuff/rfunctions/assembleSalesRankData.R")
salesRanks <- assembleSalesRankData("~/Dropbox/Data Science Stuff/apps/data/salesRank", method = method)
rm(assembleSalesRankData, ingestCSVsFromDirectory)
##
## Questions!
##
## What about correlating the mean or median sales rank for a week to the units sold for that week?
###########################################################################################################################
##                                                                                                                       ##
##                                      How many weeks above a certain sales rank?                                       ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < SALESRANK))
})
rm(SALESRANK)
###########################################################################################################################
##                                                                                                                       ##
##                          How many consecutive measurements above a certain sales rank?                                ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, SALESRANK))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction, SALESRANK)
salesRanks$`Blurred Lines`
##
## Questions!
##
## What about correlating the mean or median sales rank for a week to the units sold for that week?
###########################################################################################################################
##                                                                                                                       ##
##                                      How many weeks above a certain sales rank?                                       ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < SALESRANK))
})
rm(SALESRANK)
##
## Questions!
##
## What about correlating the mean or median sales rank for a week to the units sold for that week?
###########################################################################################################################
##                                                                                                                       ##
##                                      How many weeks above a certain sales rank?                                       ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
sapply(salesRanks, function(x) {
nrow(subset(x, x[c(2)] < SALESRANK))
})
rm(SALESRANK)
###########################################################################################################################
##                                                                                                                       ##
##                          How many consecutive measurements above a certain sales rank?                                ##
##                                                                                                                       ##
###########################################################################################################################
SALESRANK <- 500
coolNewFunction <- function(dataframe, threshold) {
## create a logical vector output of which rows are equal to or less than the threshold value
values <- dataframe[2]
out <- as.data.frame(values <= threshold)
out[,1]
}
sapply(salesRanks, function(x) {
y <- rle(coolNewFunction(x, SALESRANK))
max(y$lengths[y$values], na.rm = TRUE)
})
rm(coolNewFunction, SALESRANK)
releaseDates
